query getAllRecipes {
  recipes(order_by: {created_at: desc}) {
    description
    id
    name
    image
  }
}

query getRecipeById($id: Int!) {
  recipes_by_pk(id: $id) {
    id
    name
    description
    image
    steps
    user {
      name
    }
    recipe_ingredients {
      id
      index
      amount
      ingredient {
        id
        name
      }
      unitByUnit {
        id
        long_name
        short_name
      }
    }
  }
}

mutation createRecipe(
  $description: String
  $name: String
  $steps: jsonb
  $data: [recipe_ingredients_insert_input!]!
) {
  insert_recipes_one(
    object: {
      description: $description
      name: $name
      steps: $steps
      recipe_ingredients: { data: $data }
    }
  ) {
    id
    description
    name
    steps
    recipe_ingredients {
      amount
      ingredient_id
      unit
      index
    }
  }
}

mutation editRecipe(
  $rid: Int!
  $nin: [Int!]!
  $inputtest_insert: [recipe_ingredients_insert_input!]!
  $inputtest_update: [recipe_ingredients_insert_input!]!
  $description: String
  $name: String
  $steps: jsonb
  $image: String = ""
) {
  delete_recipe_ingredients(
    where: { recipe_id: { _eq: $rid }, id: { _nin: $nin } }
  ) {
    affected_rows
  }
  update_recipes_by_pk(
    pk_columns: { id: $rid }
    _set: {
      image: $image
      name: $name
      description: $description
      steps: $steps
    }
  ) {
    id
  }
  update_ingredients: insert_recipe_ingredients(
    objects: $inputtest_update
    on_conflict: {
      constraint: recipe_ingredients_pkey
      update_columns: [amount, unit, index]
    }
  ) {
    affected_rows
  }
  insert_ingredients: insert_recipe_ingredients(objects: $inputtest_insert) {
    returning {
      id
    }
    affected_rows
  }
}

mutation deleteRecipe($id: Int!) {
  delete_recipes_by_pk(id: $id) {
    name
  }
}